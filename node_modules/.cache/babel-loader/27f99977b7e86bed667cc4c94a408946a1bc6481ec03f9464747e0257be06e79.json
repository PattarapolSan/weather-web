{"ast":null,"code":"var _jsxFileName = \"/Users/pattarapol/Documents/Dev_Project/weather-app/src/Main.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport './Main.css';\nimport { Content } from \"./component/Content\";\nimport { FiMapPin } from \"react-icons/fi\";\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar TimeOfDay = /*#__PURE__*/function (TimeOfDay) {\n  TimeOfDay[\"Morning\"] = \"morning\";\n  TimeOfDay[\"Noon\"] = \"noon\";\n  TimeOfDay[\"Sunset\"] = \"sunset\";\n  TimeOfDay[\"Night\"] = \"night\";\n  return TimeOfDay;\n}(TimeOfDay || {});\nconst Main = () => {\n  _s();\n  const [timeOfDay, setTimeOfDay] = useState(TimeOfDay.Night);\n  const [currLat, setLat] = useState('');\n  const [currLong, setLong] = useState('');\n  const [data, setData] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedAddress, setSelectedAddress] = useState('');\n  const [currTime, setCurrTime] = useState('');\n  const getTime = () => {\n    const url = `http://api.timezonedb.com/v2.1/get-time-zone`;\n    const options = {\n      params: {\n        lat: currLat,\n        lng: currLong,\n        key: 'MF71TVBAE686',\n        format: 'json',\n        by: 'position'\n      }\n    };\n    axios.get(url, options).then(response => {\n      console.log(response);\n      const formattedString = response.data.formatted;\n      const date = new Date(formattedString);\n      const options = {\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: false\n      };\n      const timeInAmPm = date.toLocaleTimeString('en-US', options);\n      setCurrTime(timeInAmPm);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n  const getWeather = () => {\n    const url = `https://api.openweathermap.org/data/2.5/weather`;\n    const options = {\n      params: {\n        lat: currLat,\n        lon: currLong,\n        appid: '668bbc3aca97dfcdee5e638e17bcb1e8',\n        units: 'metric'\n      }\n    };\n    axios.get(url, options).then(response => {\n      console.log(response.data);\n      setData(response.data);\n      setIsLoading(false);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n  const success = pos => {\n    const crd = pos.coords;\n    setLat(crd.latitude);\n    setLong(crd.longitude);\n  };\n  useEffect(() => {\n    const [hourString] = currTime.split(\":\");\n    const hour = parseInt(hourString, 10);\n    if (hour >= 6 && hour < 10) {\n      setTimeOfDay(TimeOfDay.Morning);\n    } else if (hour >= 10 && hour < 18) {\n      setTimeOfDay(TimeOfDay.Noon);\n    } else if (hour >= 18 && hour < 20) {\n      setTimeOfDay(TimeOfDay.Sunset);\n    } else {\n      setTimeOfDay(TimeOfDay.Night);\n    }\n  }, [currTime]);\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(success);\n  }, []);\n  const getCurrLocation = () => {\n    navigator.geolocation.getCurrentPosition(success);\n  };\n  useEffect(() => {\n    getTime();\n    getWeather();\n    const intervalId = setInterval(getWeather, 30000);\n    return () => clearInterval(intervalId);\n  }, [currLat, currLong]);\n  const handleAddressSelect = async address => {\n    try {\n      const results = await geocodeByAddress(address);\n      const latLng = await getLatLng(results[0]);\n      setSelectedAddress(address);\n      setLat(latLng.lat.toString());\n      setLong(latLng.lng.toString());\n    } catch (error) {\n      console.error('Error selecting address:', error);\n    }\n  };\n  const search = () => {\n    return /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n      value: selectedAddress,\n      onChange: setSelectedAddress,\n      onSelect: handleAddressSelect,\n      children: ({\n        getInputProps,\n        suggestions,\n        getSuggestionItemProps,\n        loading\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          ...getInputProps({\n            placeholder: 'Search Places...',\n            style: {\n              width: '100%',\n              padding: '10px',\n              fontSize: '16px',\n              borderRadius: '5px'\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"main\",\n    className: `${timeOfDay}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weather\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Content, {\n      data: data,\n      loading: isLoading,\n      lat: currLat,\n      lon: currLong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"menu\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"menu-first\",\n        children: /*#__PURE__*/_jsxDEV(FiMapPin, {\n          className: \"icon\",\n          onClick: getCurrLocation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: search()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 9\n  }, this);\n};\n_s(Main, \"dR/6938X8eH6mJBAOq8UXD8Ygb4=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","useEffect","Content","FiMapPin","PlacesAutocomplete","geocodeByAddress","getLatLng","axios","jsxDEV","_jsxDEV","TimeOfDay","Main","_s","timeOfDay","setTimeOfDay","Night","currLat","setLat","currLong","setLong","data","setData","isLoading","setIsLoading","selectedAddress","setSelectedAddress","currTime","setCurrTime","getTime","url","options","params","lat","lng","key","format","by","get","then","response","console","log","formattedString","formatted","date","Date","hour","minute","hour12","timeInAmPm","toLocaleTimeString","catch","error","getWeather","lon","appid","units","success","pos","crd","coords","latitude","longitude","hourString","split","parseInt","Morning","Noon","Sunset","navigator","geolocation","getCurrentPosition","getCurrLocation","intervalId","setInterval","clearInterval","handleAddressSelect","address","results","latLng","toString","search","value","onChange","onSelect","children","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","style","width","padding","fontSize","borderRadius","fileName","_jsxFileName","lineNumber","columnNumber","id","className","onClick","_c","$RefreshReg$"],"sources":["/Users/pattarapol/Documents/Dev_Project/weather-app/src/Main.tsx"],"sourcesContent":["import React, {useState,useEffect} from \"react\";\nimport './Main.css';\nimport { Content } from \"./component/Content\";\nimport { FiSearch, FiMapPin } from \"react-icons/fi\";\nimport PlacesAutocomplete, {\n    geocodeByAddress,\n    getLatLng,\n  } from 'react-places-autocomplete';\nimport axios from \"axios\";\n  \n  \n\n\nenum TimeOfDay {\n    Morning = 'morning',\n    Noon = 'noon',\n    Sunset = 'sunset',\n    Night = 'night'\n  }\n\n\n\nconst Main = () => {\n\n    const [timeOfDay, setTimeOfDay] = useState<TimeOfDay>(TimeOfDay.Night);\n    const [currLat, setLat] = useState('');\n    const [currLong, setLong] = useState('');\n    const [data, setData] = useState('');\n    const [isLoading, setIsLoading] = useState(true);\n    const [selectedAddress, setSelectedAddress] = useState('');\n    const [currTime, setCurrTime] = useState('');\n\n    const getTime = () => {\n        const url = `http://api.timezonedb.com/v2.1/get-time-zone`;\n\n        const options  = {\n            params: {\n                lat:  currLat,\n                lng:  currLong,\n                key: 'MF71TVBAE686',\n                format: 'json',\n                by: 'position'\n    \n            }\n        };\n\n        axios.get(url,options).then((response) => {\n            console.log(response);\n            const formattedString = response.data.formatted;\n            const date = new Date(formattedString);\n            \n            const options = {\n              hour: 'numeric' as const,\n              minute: 'numeric' as const,\n              hour12: false,\n            };\n            \n            const timeInAmPm = date.toLocaleTimeString('en-US', options);\n            setCurrTime(timeInAmPm);\n        } )\n        .catch((error) => {\n            console.log(error);\n        })\n\n    }\n    \n\n    const getWeather = () => {\n        const url = `https://api.openweathermap.org/data/2.5/weather`;\n\n        const options  = {\n            params: {\n                lat:  currLat,\n                lon:  currLong,\n                appid: '668bbc3aca97dfcdee5e638e17bcb1e8',\n                units: 'metric'\n            }\n        };\n\n        axios.get(url,options).then((response) => {\n            console.log(response.data);\n            setData(response.data);\n            setIsLoading(false);\n        } )\n        .catch((error) => {\n            console.log(error);\n        })\n\n    }\n\n    const success = (pos:any) => {\n      const crd = pos.coords;\n      setLat(crd.latitude);\n      setLong(crd.longitude);\n  \n      \n    }\n\n    useEffect(()=>{\n     \n      const [hourString] = currTime.split(\":\");\n      const hour = parseInt(hourString, 10);\n\n      if (hour >= 6 && hour < 10) {\n        setTimeOfDay(TimeOfDay.Morning);\n      } else if (hour >= 10 && hour < 18) {\n        setTimeOfDay(TimeOfDay.Noon);\n      } else if (hour >= 18 && hour < 20) {\n        setTimeOfDay(TimeOfDay.Sunset);\n      } else {\n        setTimeOfDay(TimeOfDay.Night);\n      }\n\n\n    },[currTime])\n\n\n    useEffect(() =>{\n        \n        \n        \n        navigator.geolocation.getCurrentPosition(success);\n            \n\n      }, []);\n\n      const getCurrLocation = () => {\n        navigator.geolocation.getCurrentPosition(success);\n      }\n\n\n      useEffect(() => {\n        getTime();\n        getWeather();\n        const intervalId = setInterval(getWeather, 30000);\n        return () => clearInterval(intervalId);\n\n      },[currLat,currLong]);\n\n\n      const handleAddressSelect = async (address: string) => {\n        try {\n          const results = await geocodeByAddress(address);\n          const latLng = await getLatLng(results[0]);\n          setSelectedAddress(address);\n          setLat(latLng.lat.toString());\n          setLong(latLng.lng.toString());\n        } catch (error) {\n          console.error('Error selecting address:', error);\n        }\n      };\n\n      const search = () => {\n        return(\n          <PlacesAutocomplete\n            value={selectedAddress}\n            onChange={setSelectedAddress}\n            onSelect={handleAddressSelect}\n          >\n            {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n              <div>\n                <input\n                  {...getInputProps({\n                    placeholder: 'Search Places...',\n                    style: {\n                      width: '100%',\n                      padding: '10px',\n                      fontSize: '16px',\n                      borderRadius: '5px',\n                    },\n                  })}\n                />\n\n              </div>\n            )}\n          </PlacesAutocomplete>\n        );\n      }\n\n    \n\n\n      \n    return (\n        <div id=\"main\" className={`${timeOfDay}`}>\n            <h1>Weather</h1>\n          <Content data={data} loading={isLoading} lat={currLat} lon={currLong}/>\n            <div id=\"menu\">\n              <div id=\"menu-first\">\n                <FiMapPin className=\"icon\" onClick={getCurrLocation}/>\n              </div>\n              <div>\n                {search()}\n              </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Main;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}