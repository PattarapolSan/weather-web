{"ast":null,"code":"var _jsxFileName = \"/Users/pattarapol/Documents/Dev_Project/weather-app/src/Main.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport './Main.css';\nimport { Content } from \"./component/Content\";\nimport { FiMapPin } from \"react-icons/fi\";\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar TimeOfDay = /*#__PURE__*/function (TimeOfDay) {\n  TimeOfDay[\"Morning\"] = \"morning\";\n  TimeOfDay[\"Noon\"] = \"noon\";\n  TimeOfDay[\"Sunset\"] = \"sunset\";\n  TimeOfDay[\"Night\"] = \"night\";\n  return TimeOfDay;\n}(TimeOfDay || {});\nconst Main = () => {\n  _s();\n  const [timeOfDay, setTimeOfDay] = useState(TimeOfDay.Night);\n  const [currLat, setLat] = useState('');\n  const [currLong, setLong] = useState('');\n  const [data, setData] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const getWeather = () => {\n    console.log(\"call\");\n    const url = `https://api.openweathermap.org/data/2.5/weather`;\n    const options = {\n      params: {\n        lat: currLat,\n        lon: currLong,\n        appid: '668bbc3aca97dfcdee5e638e17bcb1e8',\n        units: 'metric'\n      }\n    };\n    axios.get(url, options).then(response => {\n      console.log(response.data);\n      setData(response.data);\n      setIsLoading(false);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n  const success = pos => {\n    const crd = pos.coords;\n    setLat(crd.latitude);\n    setLong(crd.longitude);\n  };\n  useEffect(() => {\n    const now = new Date();\n    const hour = now.getHours();\n    if (hour >= 6 && hour < 10) {\n      setTimeOfDay(TimeOfDay.Morning);\n    } else if (hour >= 10 && hour < 18) {\n      setTimeOfDay(TimeOfDay.Noon);\n    } else if (hour >= 18 && hour < 20) {\n      setTimeOfDay(TimeOfDay.Sunset);\n    } else {\n      setTimeOfDay(TimeOfDay.Night);\n    }\n    navigator.geolocation.getCurrentPosition(success);\n  }, []);\n  useEffect(() => {\n    getWeather();\n    const intervalId = setInterval(getWeather, 30000);\n    return () => clearInterval(intervalId);\n  }, [currLat, currLong]);\n  const handleAddressSelect = async address => {\n    try {\n      const results = await geocodeByAddress(address);\n      const latLng = await getLatLng(results[0]);\n      setSelectedAddress(address);\n      setLat(latLng.lat.toString());\n      setLong(latLng.lng.toString());\n    } catch (error) {\n      console.error('Error selecting address:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"main\",\n    className: `${timeOfDay}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weather\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Content, {\n      data: data,\n      loading: isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"menu\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(FiMapPin, {\n          className: \"icon\",\n          onClick: getWeather\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n          value: selectedAddress,\n          onChange: setSelectedAddress,\n          onSelect: handleAddressSelect,\n          children: ({\n            getInputProps,\n            suggestions,\n            getSuggestionItemProps,\n            loading\n          }) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              ...getInputProps({\n                placeholder: 'Search Places...'\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"Loading...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 30\n              }, this) : null, suggestions.map((suggestion, index) => {\n                const {\n                  placeId,\n                  description\n                } = suggestion;\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  ...getSuggestionItemProps(suggestion, {\n                    style: {\n                      backgroundColor: index % 2 === 0 ? '#f9f9f9' : '#ffffff'\n                    }\n                  }),\n                  children: description\n                }, placeId, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 142,\n                  columnNumber: 23\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, this);\n};\n_s(Main, \"zg1fAAmk+xAxd4FAJNU5hc5wDQA=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","useEffect","Content","FiMapPin","PlacesAutocomplete","geocodeByAddress","getLatLng","axios","jsxDEV","_jsxDEV","TimeOfDay","Main","_s","timeOfDay","setTimeOfDay","Night","currLat","setLat","currLong","setLong","data","setData","isLoading","setIsLoading","getWeather","console","log","url","options","params","lat","lon","appid","units","get","then","response","catch","error","success","pos","crd","coords","latitude","longitude","now","Date","hour","getHours","Morning","Noon","Sunset","navigator","geolocation","getCurrentPosition","intervalId","setInterval","clearInterval","handleAddressSelect","address","results","latLng","setSelectedAddress","toString","lng","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","loading","onClick","value","selectedAddress","onChange","onSelect","getInputProps","suggestions","getSuggestionItemProps","placeholder","map","suggestion","index","placeId","description","style","backgroundColor","_c","$RefreshReg$"],"sources":["/Users/pattarapol/Documents/Dev_Project/weather-app/src/Main.tsx"],"sourcesContent":["import React, {useState,useEffect} from \"react\";\nimport './Main.css';\nimport { Content } from \"./component/Content\";\nimport { FiSearch, FiMapPin } from \"react-icons/fi\";\nimport PlacesAutocomplete, {\n    geocodeByAddress,\n    getLatLng,\n  } from 'react-places-autocomplete';\nimport axios from \"axios\";\n  \n  \n\n\nenum TimeOfDay {\n    Morning = 'morning',\n    Noon = 'noon',\n    Sunset = 'sunset',\n    Night = 'night'\n  }\n\n\n\nconst Main = () => {\n\n    const [timeOfDay, setTimeOfDay] = useState<TimeOfDay>(TimeOfDay.Night);\n    const [currLat, setLat] = useState('');\n    const [currLong, setLong] = useState('');\n    const [data, setData] = useState('');\n    const [isLoading, setIsLoading] = useState(true);\n\n\n\n    \n\n    const getWeather = () => {\n        console.log(\"call\")\n        const url = `https://api.openweathermap.org/data/2.5/weather`;\n\n        const options  = {\n            params: {\n                lat:  currLat,\n                lon:  currLong,\n                appid: '668bbc3aca97dfcdee5e638e17bcb1e8',\n                units: 'metric'\n            }\n        };\n\n        axios.get(url,options).then((response) => {\n            console.log(response.data);\n            setData(response.data);\n            setIsLoading(false);\n        } )\n        .catch((error) => {\n            console.log(error);\n        })\n\n    }\n\n    const success = (pos:any) => {\n      const crd = pos.coords;\n      setLat(crd.latitude);\n      setLong(crd.longitude);\n  \n      \n    }\n\n    \n\n    useEffect(() =>{\n        const now = new Date();\n        const hour = now.getHours();\n    \n        if (hour >= 6 && hour < 10) {\n          setTimeOfDay(TimeOfDay.Morning);\n        } else if (hour >= 10 && hour < 18) {\n          setTimeOfDay(TimeOfDay.Noon);\n        } else if (hour >= 18 && hour < 20) {\n          setTimeOfDay(TimeOfDay.Sunset);\n        } else {\n          setTimeOfDay(TimeOfDay.Night);\n        }\n\n        \n        navigator.geolocation.getCurrentPosition(success);\n            \n\n      }, []);\n\n\n      useEffect(() => {\n        getWeather();\n        const intervalId = setInterval(getWeather, 30000);\n        return () => clearInterval(intervalId);\n\n      },[currLat,currLong]);\n\n\n      const handleAddressSelect = async (address: string) => {\n        try {\n          const results = await geocodeByAddress(address);\n          const latLng = await getLatLng(results[0]);\n          setSelectedAddress(address);\n          setLat(latLng.lat.toString());\n          setLong(latLng.lng.toString());\n        } catch (error) {\n          console.error('Error selecting address:', error);\n        }\n      };\n\n\n\n    \n\n\n      \n    return (\n        <div id=\"main\" className={`${timeOfDay}`}>\n            <h1>Weather</h1>\n          <Content data={data} loading={isLoading}/>\n            <div id=\"menu\">\n              <div>\n                <FiMapPin className=\"icon\" onClick={getWeather}/>\n              </div>\n              <div>\n              <PlacesAutocomplete\n            value={selectedAddress}\n            onChange={setSelectedAddress}\n            onSelect={handleAddressSelect}\n          >\n            {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n              <div>\n                <input\n                  {...getInputProps({\n                    placeholder: 'Search Places...',\n                  })}\n                />\n                <div>\n                  {loading ? <div>Loading...</div> : null}\n                  {suggestions.map((suggestion, index) => {\n                    const { placeId, description } = suggestion;\n                    return (\n                      <div\n                        key={placeId}\n                        {...getSuggestionItemProps(suggestion, {\n                          style: { backgroundColor: index % 2 === 0 ? '#f9f9f9' : '#ffffff' },\n                        })}\n                      >\n                        {description}\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            )}\n          </PlacesAutocomplete>\n              </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Main;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}