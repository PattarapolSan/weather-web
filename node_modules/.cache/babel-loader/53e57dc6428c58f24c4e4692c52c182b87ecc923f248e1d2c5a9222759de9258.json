{"ast":null,"code":"var _jsxFileName = \"/Users/pattarapol/Documents/Dev_Project/weather-app/src/component/Content.tsx\";\nimport React from 'react';\nimport './Content.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Content = props => {\n  const LoadingScreen = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-spinner\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this);\n  };\n  const dataScreen = () => {\n    const sunriseTimestamp = props.data.sys.sunrise; // Replace this with the actual timestamp from the API\n\n    // Convert Unix timestamp to milliseconds\n    const sunriseMilliseconds = sunriseTimestamp * 1000;\n\n    // Create a new Date object using the milliseconds\n    const sunriseDate = new Date(sunriseMilliseconds);\n\n    // Format the sunrise time in a readable format (e.g., HH:MM:SS AM/PM)\n    const sunriseTime = sunriseDate.toLocaleTimeString('en-US', {\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: true\n    });\n    console.log('Sunrise time:', sunriseTime);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: props.data.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [props.data.main.temp, \" \\u02DAC\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [props.data.main.feels_like, \" \\u02DAC\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [props.data.main.temp_min, \" \\u02DAC\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [props.data.main.temp_max, \" \\u02DAC\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"content\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: props.loading ? LoadingScreen() : dataScreen()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n_c = Content;\nvar _c;\n$RefreshReg$(_c, \"Content\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","Content","props","LoadingScreen","className","children","fileName","_jsxFileName","lineNumber","columnNumber","dataScreen","sunriseTimestamp","data","sys","sunrise","sunriseMilliseconds","sunriseDate","Date","sunriseTime","toLocaleTimeString","hour","minute","second","hour12","console","log","name","main","temp","feels_like","temp_min","temp_max","id","loading","_c","$RefreshReg$"],"sources":["/Users/pattarapol/Documents/Dev_Project/weather-app/src/component/Content.tsx"],"sourcesContent":["import React, {useState,useEffect} from 'react';\nimport './Content.css';\n\ninterface ContextProp {\n\n}\n\nexport const Content = (props:any) => {\n    \n    \n    \n    const LoadingScreen = () => {\n        return (\n      <div className=\"loading-spinner\">\n        <div className=\"spinner\"></div>\n      </div>\n        );\n        \n    }\n\n    const dataScreen = () => {\n        const sunriseTimestamp = props.data.sys.sunrise; // Replace this with the actual timestamp from the API\n\n        // Convert Unix timestamp to milliseconds\n        const sunriseMilliseconds = sunriseTimestamp * 1000;\n\n        // Create a new Date object using the milliseconds\n        const sunriseDate = new Date(sunriseMilliseconds);\n\n        // Format the sunrise time in a readable format (e.g., HH:MM:SS AM/PM)\n        const sunriseTime = sunriseDate.toLocaleTimeString('en-US', {\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: true,\n        });\n\nconsole.log('Sunrise time:', sunriseTime);\n        return (\n            <>\n                <h2>{props.data.name}</h2>\n                <h3>{props.data.main.temp} ˚C</h3>\n                <h4>{props.data.main.feels_like} ˚C</h4>\n                <p>{props.data.main.temp_min} ˚C</p>\n                <p>{props.data.main.temp_max} ˚C</p>\n            </>\n        );\n        \n    }\n\n\n    return (\n        <div id=\"content\">\n            <div>\n                {props.loading ? LoadingScreen() : dataScreen()}    \n            </div>\n        </div>\n    )\n}\n\n"],"mappings":";AAAA,OAAOA,KAAK,MAA4B,OAAO;AAC/C,OAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAMvB,OAAO,MAAMC,OAAO,GAAIC,KAAS,IAAK;EAIlC,MAAMC,aAAa,GAAGA,CAAA,KAAM;IACxB,oBACFL,OAAA;MAAKM,SAAS,EAAC,iBAAiB;MAAAC,QAAA,eAC9BP,OAAA;QAAKM,SAAS,EAAC;MAAS;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC;EAGR,CAAC;EAED,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACrB,MAAMC,gBAAgB,GAAGT,KAAK,CAACU,IAAI,CAACC,GAAG,CAACC,OAAO,CAAC,CAAC;;IAEjD;IACA,MAAMC,mBAAmB,GAAGJ,gBAAgB,GAAG,IAAI;;IAEnD;IACA,MAAMK,WAAW,GAAG,IAAIC,IAAI,CAACF,mBAAmB,CAAC;;IAEjD;IACA,MAAMG,WAAW,GAAGF,WAAW,CAACG,kBAAkB,CAAC,OAAO,EAAE;MAC5DC,IAAI,EAAE,SAAS;MACfC,MAAM,EAAE,SAAS;MACjBC,MAAM,EAAE,SAAS;MACjBC,MAAM,EAAE;IACR,CAAC,CAAC;IAEVC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEP,WAAW,CAAC;IACjC,oBACIpB,OAAA,CAAAE,SAAA;MAAAK,QAAA,gBACIP,OAAA;QAAAO,QAAA,EAAKH,KAAK,CAACU,IAAI,CAACc;MAAI;QAAApB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC1BX,OAAA;QAAAO,QAAA,GAAKH,KAAK,CAACU,IAAI,CAACe,IAAI,CAACC,IAAI,EAAC,UAAG;MAAA;QAAAtB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAClCX,OAAA;QAAAO,QAAA,GAAKH,KAAK,CAACU,IAAI,CAACe,IAAI,CAACE,UAAU,EAAC,UAAG;MAAA;QAAAvB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxCX,OAAA;QAAAO,QAAA,GAAIH,KAAK,CAACU,IAAI,CAACe,IAAI,CAACG,QAAQ,EAAC,UAAG;MAAA;QAAAxB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACpCX,OAAA;QAAAO,QAAA,GAAIH,KAAK,CAACU,IAAI,CAACe,IAAI,CAACI,QAAQ,EAAC,UAAG;MAAA;QAAAzB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA,eACtC,CAAC;EAGX,CAAC;EAGD,oBACIX,OAAA;IAAKkC,EAAE,EAAC,SAAS;IAAA3B,QAAA,eACbP,OAAA;MAAAO,QAAA,EACKH,KAAK,CAAC+B,OAAO,GAAG9B,aAAa,CAAC,CAAC,GAAGO,UAAU,CAAC;IAAC;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAAyB,EAAA,GAnDYjC,OAAO;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}